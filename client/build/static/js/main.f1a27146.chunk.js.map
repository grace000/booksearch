{"version":3,"sources":["components/Query/Query.js","components/Result/Result.js","components/utility/helpers.js","App.js","serviceWorker.js","index.js"],"names":["Query","props","react_default","a","createElement","className","onSubmit","getBooks","type","name","placeholder","required","Result","result","this","infoLink","title","href","target","authors","map","author","key","concat","description","slice","publisher","imageLinks","src","smallThumbnail","alt","Component","runQuery","term","formattedTerm","trim","url","axios","get","then","results","data","App","state","errorStatus","undefined","e","preventDefault","elements","search","value","reset","_this","setState","bookList","items","catch","error","_this$state","components_Query_Query","length","Result_Result_Result","id","volumeInfo","Boolean","window","location","hostname","match","require","config","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f1a27146.chunk.js","sourcesContent":["import React from 'react'\nimport './Query.css'\n\nconst Query = props => (\n    <div className=\"query-wrapper\">\n        <h1 className=\"query-title\">BookSearch</h1>\n        <form className=\"query-form\" onSubmit={props.getBooks}>\n            <input \n                className=\"query-input\"\n                type =\"text\" \n                name=\"search\" \n                placeholder=\"title, author, and/or keyword\"\n                required\n                />\n            <button className=\"query-btn\" type=\"submit\">Search</button>\n        </form>\n    </div>\n);\n        \nexport default Query;\n","import React, { Component } from 'react'\nimport './Result.css'\n\nexport default class Result extends Component {\n  render() {\n    const { result } = this.props;\n    return (\n      <div className=\"result-wrapper\">\n        <div className=\"result-box\">\n          <div className=\"result-text\">\n            {\n              result.infoLink && result.title &&\n              <h3>\n                <a className=\"title\" href={result.infoLink} target=\"none\">\n                    {result.title}\n                </a>\n              </h3>\n            }\n            {\n              result.authors && \n              <ul className=\"author\">{result.authors.map(author =>\n                <li key={author}>\n                    <a href={`https://google.com/search?q=+${author}`} target=\"none\">{author}</a>\n                </li>)}\n              </ul>\n            }\n            {\n              result.description &&\n              <p className=\"search-snippet\">{result.description.slice(0,150)}...</p>\n            }\n            {\n              result.publisher && \n              <p className=\"publisher\">{result.publisher}</p>\n            }\n          </div>\n          <div className=\"result-image\">\n            {\n              result.imageLinks && \n              (\n                <img src={result.imageLinks.smallThumbnail} alt=\"\" />\n              )\n            }\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n","import axios from \"axios\"\n\n\nconst runQuery = term => {\n  let formattedTerm = term.trim()\n\n  const url = `https://www.googleapis.com/books/v1/volumes?q=${formattedTerm}&maxResults=39`\n\n  return axios.get(url).then(results => results.data)\n}\n\nexport {runQuery};","import React, { Component } from 'react';\nimport './App.css';\nimport Query from './components/Query/Query';\nimport Result from './components/Result/Result';\nimport { runQuery } from './components/utility/helpers';\n\nclass App extends Component {\n  state = {\n    results:[],\n    errorStatus: undefined\n  }\n\n  getBooks = (e) => {\n    e.preventDefault();\n    const term = e.target.elements.search.value;\n    e.target.reset();\n\n    runQuery(term)\n      .then(data => {\n        this.setState({results:[]})\n        const bookList = data.items;\n        this.setState({results:bookList})\n      })\n      .catch(error => {\n          this.setState({errorStatus: \"search returned no results\"})\n      })\n  }\n  render() {\n    const { results, errorStatus } = this.state;\n    return (\n      <div className=\"App\">\n        <div className=\"query-container\">\n          <Query getBooks={this.getBooks} />\n        </div>\n        <div className=\"results-container\">\n          {errorStatus && <p>{errorStatus}</p>}\n          {results.length === 0 && <p>Start your book search!</p>}\n          {results.map(result => <Result \n            key={result.id}\n            result={result.volumeInfo}\n          />)}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nrequire('dotenv').config();\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}